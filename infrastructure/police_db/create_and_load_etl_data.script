DROP SCHEMA If EXISTS etl CASCADE;
CREATE SCHEMA etl;


CREATE TABLE etl.officer_hub
(
  officer_id     INTEGER,
  race_code      INTEGER,
  ethnicity_code INTEGER,
  date_of_birth  DATE
);

CREATE TABLE etl.dispatches
(
  dispatch_id              INTEGER,
  dispatch_final_type_code INTEGER,
  dispatch_category        TEXT,
  time_on_scene_minutes    INTEGER,
  officer_id               INTEGER,
  event_datetime           TIMESTAMP WITH TIME ZONE
);

CREATE TABLE etl.investigations
(
  department_defined_investigation_id INTEGER,
  grouped_incident_type_code          INTEGER,
  intervention_type_code              INTEGER,
  final_ruling_code                   INTEGER,
  judgement_date                      DATE,
  incident_date                       DATE,
  officer_id                          INTEGER,
  reported_date                       DATE
);

WITH settings AS (

    SELECT
      100 AS no_of_officers,
      1000 AS no_of_dispatches,
      100 AS no_of_investigations

), officer_hub_ids AS (
    SELECT generate_series(1, no_of_officers) AS officer_id
    FROM settings
), numbers AS (
    SELECT generate_series(1, 10) AS id
), cross_product_officer_hub AS (
    SELECT *
    FROM officer_hub_ids a
      CROSS JOIN numbers
      CROSS JOIN (SELECT code AS race_code
                  FROM staging.lookup_races) AS race
      CROSS JOIN (SELECT code AS ethnicity_code
                  FROM staging.lookup_ethnicities) AS ethnicity
      CROSS JOIN generate_series(21, 60) AS age

), filtered_officer_hub AS (
    SELECT *
    FROM cross_product_officer_hub
    ORDER BY random()
    LIMIT 1000
), officer_hub_raw AS (
    SELECT DISTINCT ON (officer_id)
      officer_id,
      race_code,
      ethnicity_code,
      age
    FROM filtered_officer_hub
), officer_hub AS (
   INSERT INTO etl.officer_hub
    SELECT
      officer_id,
      race_code,
      ethnicity_code,
      (now() - INTERVAL '1 year' * age) :: DATE AS date_of_birth
    FROM officer_hub_raw
  RETURNING officer_id, race_code, ethnicity_code, date_of_birth
), dispatch_ids AS (
    SELECT generate_series(1, no_of_dispatches) AS dispatch_id
    FROM settings
), cross_product_dispatches AS (
    SELECT
      dispatch_id,
      dispatch_final_type_code,
      dispatch_category,
      time_on_scene_minutes,
      officer_id
    FROM dispatch_ids a
      --CROSS JOIN numbers x there are enough categories
      CROSS JOIN (SELECT code AS dispatch_final_type_code
                  FROM staging.lookup_dispatch_types) AS b
      CROSS JOIN (SELECT unnest(ARRAY ['OI', 'CI']) AS dispatch_category) AS c
      CROSS JOIN generate_series(5, 20) AS time_on_scene_minutes
      CROSS JOIN settings
      CROSS JOIN generate_series(1, no_of_officers) AS officer_id

), filtered_dispatches AS (
    SELECT *
    FROM cross_product_dispatches
    ORDER BY random()
    LIMIT 10000
), dispatches AS (
    INSERT INTO etl.dispatches
    SELECT DISTINCT ON (dispatch_id)
      dispatch_id,
      dispatch_final_type_code,
      dispatch_category,
      time_on_scene_minutes,
      officer_id,
      now() - INTERVAL '5 years' + INTERVAL '1 day' * dispatch_final_type_code +
      INTERVAL '1 hour' * time_on_scene_minutes AS event_datetime

    FROM filtered_dispatches
  RETURNING dispatch_id, dispatch_final_type_code, dispatch_category, time_on_scene_minutes, officer_id, event_datetime
), investigation_ids AS (
    SELECT generate_series(1, no_of_investigations) AS department_defined_investigation_id
    FROM settings
), cross_product_investigations AS (
    SELECT
      department_defined_investigation_id,
      grouped_incident_type_code,
      intervention_type_code,
      final_ruling_code,
      officer_id,
      event_datetime :: DATE                                                 AS incident_date,
      (event_datetime + INTERVAL '1 day' * dispatch_final_type_code) :: DATE AS reported_date,
      (event_datetime + INTERVAL '15 day') :: DATE                           AS judgement_date
    FROM investigation_ids a
      CROSS JOIN settings
      CROSS JOIN (SELECT code AS grouped_incident_type_code
                  FROM staging.lookup_incident_types) AS b
      CROSS JOIN (SELECT code AS intervention_type_code
                  FROM staging.lookup_intervention_types) AS c
      CROSS JOIN (SELECT code AS final_ruling_code
                  FROM staging.lookup_final_rulings) AS d
      CROSS JOIN generate_series(1, no_of_officers) AS officer_id
      JOIN dispatches
      USING (officer_id) -- to make sure we have incidents that are reported after the dispatch happened
), filtered_investigations AS (
    SELECT
      department_defined_investigation_id,
      grouped_incident_type_code,
      CASE WHEN reported_date > judgement_date
        THEN 0
      ELSE intervention_type_code END AS intervention_type_code,
      CASE WHEN reported_date > judgement_date
        THEN 0
      ELSE final_ruling_code END      AS final_ruling_code,
      CASE WHEN reported_date > judgement_date
        THEN NULL
      ELSE judgement_date END         AS judgement_date,
      officer_id,
      incident_date,
      reported_date
    FROM cross_product_investigations
    ORDER BY random()
    LIMIT 1000
)
INSERT INTO etl.investigations
SELECT DISTINCT ON (department_defined_investigation_id)
        department_defined_investigation_id,
        grouped_incident_type_code,
        intervention_type_code,
        final_ruling_code,
        judgement_date,
	incident_date,
        officer_id,
        reported_date
      FROM filtered_investigations;






INSERT INTO staging.officers_hub
(entity_id,
 department_defined_officer_id,
 race_code,
 ethnicity_code,
 date_of_birth,
 create_time,
 last_modified)
  (SELECT
     officer_id               AS entity_id,
     cast(officer_id AS TEXT) AS department_defined_officer_id,
     race_code                AS race_code,
     ethnicity_code           AS ethnicity_code,
     date_of_birth            AS date_of_birth,
     now()                    AS create_time,
     now()                    AS last_modified
   FROM etl.officer_hub
  );

WITH event_hub_insert AS (
  INSERT INTO staging.events_hub
  (department_defined_event_id,
   entity_id,
   event_type_code,
   event_datetime,
   dispatch_id
  )
    (SELECT
       d.dispatch_id  AS department_defined_event_id,
       o.entity_id,
       (SELECT code
        FROM staging.lookup_event_types
        WHERE VALUE = 'dispatch'
        LIMIT 1)      AS event_type_code,
       event_datetime AS event_datetime,
       d.dispatch_id  AS dispatch_id
     FROM etl.dispatches d
       JOIN staging.officers_hub o
         ON o.department_defined_officer_id = d.officer_id :: TEXT
    )
  RETURNING department_defined_event_id, entity_id, event_datetime, event_id
)

INSERT INTO staging.dispatches (
  event_id,
  dispatch_id,
  dispatch_final_type_code,
  time_on_scene_minutes,
  dispatch_category,
  event_datetime,
  entity_id
) (
  SELECT
    event.event_id             AS event_id,
    d.dispatch_id              AS dispatch_id,
    d.dispatch_final_type_code AS dispatch_final_type_code,
    d.time_on_scene_minutes    AS time_on_scene_minutes,
    d.dispatch_category        AS dispatch_category,
    event.event_datetime       AS event_datetime,
    event.entity_id            AS entity_id

  FROM etl.dispatches d
    JOIN event_hub_insert event ON event.department_defined_event_id = d.dispatch_id :: TEXT
);


WITH event_hub_insert AS (

  INSERT INTO staging.events_hub
  (

    department_defined_event_id,
    entity_id,
    event_type_code,
    event_datetime
  )
    (SELECT
       i.department_defined_investigation_id AS department_defined_event_id,
       i.officer_id                          AS entity_id,
       (SELECT code
        FROM staging.lookup_event_types
        WHERE VALUE = 'investigatable_incident'
        LIMIT 1)
                                             AS event_type_code,
       incident_date                         AS event_datetime
     FROM etl.investigations i
       JOIN staging.officers_hub o ON o.department_defined_officer_id = i.officer_id :: TEXT
    )

  RETURNING department_defined_event_id, entity_id, event_datetime, event_id
)
INSERT INTO staging.incidents
(event_id,
 department_defined_investigation_id,
 report_date,
 intervention_type_code,
 date_of_judgment,
 final_ruling_code,
 event_datetime,
 entity_id)
  SELECT
    event.event_id              AS event_id,
    department_defined_event_id AS department_defined_investigation_id,
    reported_date               AS report_date,
    inv.intervention_type_code  AS intervention_type_code,
    judgement_date              AS date_of_judgment,
    final_ruling_code           AS final_ruling_code,
    event.event_datetime,
    event.entity_id
  FROM etl.investigations inv
    JOIN event_hub_insert event ON event.department_defined_event_id = inv.department_defined_investigation_id :: TEXT;
